package app;

import java.io.*;
import java.util.*;
import java.util.regex.*;

import structures.Stack;

public class Expression {

	public static String delims = " \t*+-/()[]";

	/**
	 * Populates the vars list with simple variables, and arrays lists with arrays
	 * in the expression. For every variable (simple or array), a SINGLE instance is
	 * created and stored, even if it appears more than once in the expression. At
	 * this time, values for all variables and all array items are set to zero -
	 * they will be loaded from a file in the loadVariableValues method.
	 * 
	 * @param expr   The expression
	 * @param vars   The variables array list - already created by the caller
	 * @param arrays The arrays array list - already created by the caller
	 */
	public static void makeVariableLists(String expr, ArrayList<Variable> vars, ArrayList<Array> arrays) {
		/** COMPLETE THIS METHOD **/
		/**
		 * DO NOT create new vars and arrays - they are already created before being
		 * sent in to this method - you just need to fill them in.
		 **/
		String s = "";
		expr = expr.replace("\t", "");
		expr = expr.replace(" ", "");
		ArrayList<String> duplicatevars = new ArrayList<String>();
		ArrayList<String> duplicatearr = new ArrayList<String>();

		for (int i = 0; i < expr.length(); i++) {

			boolean inputcheck = true;

			for (int x = 0; x < delims.length(); x++) {
				if (expr.charAt(i) == delims.charAt(x)) {
					inputcheck = false;
				}

			}
			if (Character.isDigit(expr.charAt(i))) {
				inputcheck = false;
			}

			if (inputcheck == true) {
				s = s + expr.charAt(i);
				if (i == expr.length() - 1) {
					if (duplicatevars.contains(s) == false) {
						Variable varinsert = new Variable(s);
						vars.add(varinsert);
						duplicatevars.add(s);
					}
				}
			} else {
				if (expr.charAt(i) == '[') {
					if (duplicatearr.contains(s) == false) {
						Array arrinsert = new Array(s);
						arrays.add(arrinsert);
						duplicatearr.add(s);
					}
				} else {
					if (s.isEmpty() == false) {
						if (duplicatevars.contains(s) == false) {
							Variable varinsert = new Variable(s);
							vars.add(varinsert);
							duplicatevars.add(s);
						}

					}
				}
				s = new String();
			}

		}
	}

	/**
	 * Loads values for variables and arrays in the expression
	 * 
	 * @param sc Scanner for values input
	 * @throws IOException If there is a problem with the input
	 * @param vars   The variables array list, previously populated by
	 *               makeVariableLists
	 * @param arrays The arrays array list - previously populated by
	 *               makeVariableLists
	 */
	public static void loadVariableValues(Scanner sc, ArrayList<Variable> vars, ArrayList<Array> arrays)
			throws IOException {
		while (sc.hasNextLine()) {
			StringTokenizer st = new StringTokenizer(sc.nextLine().trim());
			int numTokens = st.countTokens();
			String tok = st.nextToken();
			Variable var = new Variable(tok);
			Array arr = new Array(tok);
			int vari = vars.indexOf(var);
			int arri = arrays.indexOf(arr);
			if (vari == -1 && arri == -1) {
				continue;
			}
			int num = Integer.parseInt(st.nextToken());
			if (numTokens == 2) { // scalar symbol
				vars.get(vari).value = num;
			} else { // array symbol
				arr = arrays.get(arri);
				arr.values = new int[num];
				// following are (index,val) pairs
				while (st.hasMoreTokens()) {
					tok = st.nextToken();
					StringTokenizer stt = new StringTokenizer(tok, " (,)");
					int index = Integer.parseInt(stt.nextToken());
					int val = Integer.parseInt(stt.nextToken());
					arr.values[index] = val;
				}
			}
		}
	}

	
	
	private static boolean isDelim(char tokenChar) {
		boolean checkDelim = false;
		for (int x = 0; x < delims.length(); x++) {
			if (tokenChar == delims.charAt(x)) {
				checkDelim = true;
			}
		}
		return checkDelim;
	}
	
	private static float performoperation(String sign, float num2, float num1) {
		float result = 0;
		if (sign.equals("+")) {
			result = num1 + num2;
		} else if (sign.equals("-")) {
			result = num1 - num2;
		} else if (sign.equals("*")) {
			result = num1 * num2;
		} else {
			result = num1 / num2;
		}

		return result;

	}

	private static boolean ordercheck(String inoperator, String instackoperator) {

		if (instackoperator.equals(")") || instackoperator.equals("(") || instackoperator.equals("]") || instackoperator.equals("[")) {
			return false;
		}
		else if (inoperator.equals("/") || inoperator.equals("*") && instackoperator.equals("-") || instackoperator.equals("+")) {
			return false;
		}
		else
		{
			return true;
		}

	}
	/**
	 * Evaluates the expression.
	 * 
	 * @param vars   The variables array list, with values for all variables in the
	 *               expression
	 * @param arrays The arrays array list, with values for all array items
	 * @return Result of evaluation
	 */
	
	public static float evaluate(String expr, ArrayList<Variable> vars, ArrayList<Array> arrays) {

		expr = expr.replace(" ", "");
		expr = expr.replace("\t", "");
		

		ArrayList<String> tokens = new ArrayList<String>();
		
		

		for (int i = 0; i < expr.length(); i++) {
			
			boolean checkDelim = false;
			char tokenChar = expr.charAt(i);

	

			//s = s.replace(" ", "");
			//num = num.replace(" ", "");
			

			if (Character.isDigit(tokenChar)) { // it is a number
				
				StringBuffer sbuf = new StringBuffer();
				sbuf.append(tokenChar);
				
//				
				while ( i < expr.length()-1)
				{
					i++;
					tokenChar = expr.charAt(i);
					if(Character.isDigit(tokenChar)){
						sbuf.append(tokenChar);	
					}
					else {
						i--;
						break;
					}
					
				}
				tokens.add(sbuf.toString());
				
			}
			else if (Character.isLetter(tokenChar)) { // it is a number
				
				StringBuffer sbuf = new StringBuffer();
				sbuf.append(tokenChar);
				
//				
				while ( i < expr.length()-1)
				{
					i++;
					tokenChar = expr.charAt(i);
					if(Character.isLetter(tokenChar)){
						sbuf.append(tokenChar);	
					}
					else {
						i--;
						break;					
					}
					
				}
				tokens.add(sbuf.toString());
				
			}
			
			else if (isDelim(tokenChar)) { // it is a delim
				
				tokens.add(String.valueOf(tokenChar));
			}
		}
		if (tokens.isEmpty() == true) {
			return 0;
		}
		if (tokens.size() == 1) {
			if (Character.isDigit(tokens.get(0).charAt(0))) {
				return (Float.parseFloat(tokens.get(0)));
			} else {
				return getVariableValue (tokens.get(0), vars);
				
			}

		}

		Stack<Float> operands = new Stack<Float>();
		Stack<String> operators = new Stack<String>();
		Stack<String> arrstk = new Stack<String>();
		for (int x = 0; x < tokens.size(); x++) {
			String c = tokens.get(x);

			if (c.equals("(")) {
				operators.push(c);
			} else if (c.equals(")")) {

				while (operators.peek().equals("(") == false) {
					float result = performoperation(operators.pop(), operands.pop(), operands.pop());
					operands.push(result);
				}

				operators.pop();

			} else if (c.equals("[")) {
				String arrname = tokens.get(x - 1);
				arrstk.push(arrname);
				operators.push(c);

			} else if (c.equals("]")) {
				while (operators.peek().equals("[") == false) {
					float result = performoperation(operators.pop(), operands.pop(), operands.pop());
					operands.push(result);
				}

				String arrayname = arrstk.pop();

				int indexofarray = (int) Math.floor(operands.pop());

				int value = getArrayValue(arrayname,indexofarray,arrays);
				
				operands.push((float) value);

				operators.pop();

			} else if (c.equals("+") || c.equals("-") || c.equals("*") || c.equals("/")) {

				while (!operators.isEmpty() && ordercheck(c, operators.peek()) == true) {
					float result = performoperation(operators.pop(), operands.pop(), operands.pop());
					operands.push(result);
				}

				operators.push(c);

			} else {
				float input;
				if (Character.isLetter(c.charAt(0)) == true) {
					
					if ((x+1<tokens.size())&& (tokens.get(x+1).equals("[")==false))
					{

						input = getVariableValue(c,vars);
					}
					else if (x==tokens.size()-1)
					{
						input = getVariableValue(c,vars);
					}
					else
					{
						continue;
					}
					
				} else {
					input = Float.parseFloat(c);
				}
				operands.push(input);

			}

		}

		while (operators.isEmpty() == false) {
			float second = operands.pop();
			float first = operands.pop();
			float result = performoperation(operators.pop(), second, first);
			operands.push(result);

		}

		return operands.pop();
	}
	
	private static int getVariableValue(String vName, ArrayList<Variable> vars) {
		Variable v = new Variable(vName);
		int index = vars.indexOf(v);
		return vars.get(index).value;
	}
	private static int getArrayValue(String aName, int valuesindex, ArrayList<Array> arrays) {
		Array a = new Array(aName);
		int index = arrays.indexOf(a);
		return arrays.get(index).values[valuesindex];
	}

}
