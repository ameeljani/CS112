/*************************************************************************
 *  Compilation:  javac ArtCollage.java
 *  Execution:    java ArtCollage
 *
 *  @author:
 *
 *************************************************************************/

import java.awt.Color;

public class ArtCollage {

    // The orginal picture
    private Picture original;

    // The collage picture
    private Picture collage;

    // The collage Picture consists of collageDimension X collageDimension tiles
    private int collageDimension;

    // A tile consists of tileDimension X tileDimension pixels
    private int tileDimension;
    
    /*
     * One-argument Constructor
     * 1. set default values of collageDimension to 4 and tileDimension to 100
     * 2. initializes original with the filename image
     * 3. initializes collage as a Picture of tileDimension*collageDimension x tileDimension*collageDimension, 
     *    where each pixel is black (see all constructors for the Picture class).
     * 4. update collage to be a scaled version of original (see scaling filter on Week 9 slides)
     *
     * @param filename the image filename
     */
    public ArtCollage (String filename) {

	collageDimension=4;
    tileDimension=100;

    original= new Picture (filename);

    collage= new Picture (tileDimension*collageDimension,tileDimension*collageDimension);


    for (int col=0; col<tileDimension*collageDimension;col++)
    {
            
        for (int row=0; row<tileDimension*collageDimension;row++ )

        {

             int scol= col*((original.width())/(tileDimension*collageDimension));
             int srow= row*((original.height())/(tileDimension*collageDimension));

             Color colo= original.get(scol,srow);

             collage.set(col, row, colo);

        }

    }

    }

    /*
     * Three-arguments Constructor
     * 1. set default values of collageDimension to cd and tileDimension to td
     * 2. initializes original with the filename image
     * 3. initializes collage as a Picture of tileDimension*collageDimension x tileDimension*collageDimension, 
     *    where each pixel is black (see all constructors for the Picture class).
     * 4. update collage to be a scaled version of original (see scaling filter on Week 9 slides)
     *
     * @param filename the image filename
     */
    public ArtCollage (String filename, int td, int cd) {

	collageDimension=cd;
    tileDimension=td;

     original= new Picture (filename);

    collage= new Picture (tileDimension*collageDimension,tileDimension*collageDimension);

    for (int col=0; col<tileDimension*collageDimension;col++)
    {
            
        for (int row=0; row<tileDimension*collageDimension;row++ )

        {

             int scol= col*((original.width())/(tileDimension*collageDimension));
             int srow= row*((original.height())/(tileDimension*collageDimension));

             Color colo= original.get(scol,srow);

             collage.set(col, row, colo);

        }

    }



    }

    /*
     * Returns the collageDimension instance variable
     *
     * @return collageDimension
     */
    public int getCollageDimension() {

	     return collageDimension;

    }

    /*
     * Returns the tileDimension instance variable
     *
     * @return tileDimension
     */
    public int getTileDimension() {

	
          return tileDimension;


    }

    /*
     * Returns original instance variable
     *
     * @return original
     */
    public Picture getOriginalPicture() {

	      
          return original;


    }

    /*
     * Returns collage instance variable
     *
     * @return collage
     */
    public Picture getCollagePicture() {

	
        return collage;


    }
    
    /*
     * Display the original image
     * Assumes that original has been initialized
     */
    public void showOriginalPicture() {

	    original.show();



    }

    /*
     * Display the collage image
     * Assumes that collage has been initialized
     */
    public void showCollagePicture() {

	    collage.show();
	    


    }

    /*
     * Replaces the tile at collageCol,collageRow with the image from filename
     * Tile (0,0) is the upper leftmost tile
     *
     * @param filename image to replace tile
     * @param collageCol tile column
     * @param collageRow tile row
     */
    public void replaceTile (String filename,  int collageCol, int collageRow) {

	int begpixrow=collageRow*tileDimension;
    int begpixcol=collageCol*tileDimension;
    int endpixrow=begpixrow+tileDimension;
    int endpixcol=begpixcol+tileDimension;
    Picture source= new Picture(filename);
    Picture temp2= new Picture(tileDimension,tileDimension);

      for (int tcol=0; tcol<tileDimension; tcol++)
      {

         for(int trow=0; trow<tileDimension;trow++)
         {
             
             int scol=tcol*source.width()/tileDimension;
             int srow=trow*source.height()/tileDimension;
            
             Color color1=source.get(scol,srow);

             temp2.set(tcol,trow,color1);


         }


      }
      

    for (int col=0; col<tileDimension; col++){

         for (int row=0; row<tileDimension; row++)
         {

             Color color= temp2.get(col,row);

             collage.set(col+(collageCol*tileDimension), row+(collageCol*tileDimension), color);

         }
    }



    }
    
    /*
     * Makes a collage of tiles from original Picture
     * original will have collageDimension x collageDimension tiles, each tile
     * has tileDimension X tileDimension pixels
     */
	public void makeCollage () {

	Picture temp=new Picture(tileDimension,tileDimension);
	
	for (int tcol=0; tcol<tileDimension; tcol++)
    {

       for(int trow=0; trow<tileDimension;trow++)
       {
           
           int scol=tcol*original.width()/tileDimension;
           int srow=trow*original.height()/tileDimension;
          
           Color color1=original.get(scol,srow);

           temp.set(tcol,trow,color1);
       }
    }
	
	for (int collagecol=0;collagecol<collageDimension;collagecol++)
	{
		for (int collagerow=0;collagerow<collageDimension;collagerow++)
		{
			
				for (int colrg=0;colrg<tileDimension;colrg++)
				{
					for (int rowrg=0;rowrg<tileDimension;rowrg++)
					{
						
						Color color=temp.get(colrg, rowrg);
						collage.set(colrg+(collagecol*tileDimension), rowrg+(collagerow*tileDimension), color);
						
						
					}
					
					
				}
	
	
		}
	
	}

   
	
	
	
	
	
    }

    /*
     * Colorizes the tile at (collageCol, collageRow) with component 
     * (see Week 9 slides, the code for color separation is at the 
     *  book's website)
     *
     * @param component is either red, blue or green
     * @param collageCol tile column
     * @param collageRow tile row
     */
    public void colorizeTile (String component,  int collageCol, int collageRow) {

	int pixrow=collageRow*tileDimension;
    int pixcol=collageCol*tileDimension;
    int endprow=pixrow+tileDimension;
    int endpcol=pixcol+tileDimension;

    for (int col=pixcol; col<endpcol; col++)
    {

         for (int row=pixrow; row<endprow; row++)
         {

           Color color=collage.get(col, row);
           int r=color.getRed();
           int g=color.getGreen();
           int b=color.getBlue();
           
           if (component=="blue")
           {
        	   collage.set(col, row, new Color(0,0,b));
           }
           if (component=="green")
           {
        	   collage.set(col, row, new Color(0,g,0));
           }
           if (component=="red")
           {
        	   collage.set(col, row, new Color(r,0,0));
           }
         


         }





     }




    }

    /*
     * Greyscale tile at (collageCol, collageRow)
     * (see Week 9 slides, the code for luminance is at the book's website)
     *
     * @param collageCol tile column
     * @param collageRow tile row
     */

    public void greyscaleTile (int collageCol, int collageRow) {

	int pixrow=collageRow*tileDimension;
    int pixcol=collageCol*tileDimension;
    int endprow=pixrow+tileDimension;
    int endpcol=pixcol+tileDimension;


    for (int col=pixcol; col<endpcol; col++)
    {

         for (int row=pixrow; row<endprow; row++)
         {

             Color color3= collage.get(col,row);

             Color gray= Luminance.toGray(color3);

             collage.set(col,row,gray);


         }


    }

    }


    // Test client 
    public static void main (String[] args) {

        ArtCollage art = new ArtCollage("Ariel.jpg", 200, 4);
        art.makeCollage();
        art.colorizeTile("green", 3, 3);
        art.showCollagePicture();
        
        
    }
}
